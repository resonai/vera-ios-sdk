// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VeraSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import AVFoundation
import Accelerate
import SystemConfiguration.CaptiveNetwork
import Combine
import CoreImage
import CoreLocation
import CoreMotion
import Foundation
import GameplayKit
import JavaScriptCore
import LocalAuthentication
import Metal
import MetalKit
import NetworkExtension
import Security
import Swift
import SystemConfiguration
import UIKit
@_exported import VeraSDK
import WebKit
import _Concurrency
import _StringProcessing
import os
import simd
postfix operator >!
public struct Memory {
  public static var formattedFootprint: Swift.String? {
    get
  }
}
extension Swift.Result : Swift.Decodable where Success : Swift.Decodable, Failure == Swift.Error {
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.5, *)
@_Concurrency.MainActor(unsafe) final public class VeraViewController : UIKit.UIViewController, ARKit.ARSessionDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc override final public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewSafeAreaInsetsDidChange()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
extension VeraSDK.VeraViewController : MetalKit.MTKViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc final public func draw(in view: MetalKit.MTKView)
}
extension VeraSDK.VeraViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc final public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (VeraSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (VeraSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: VeraSDK.Reachability.NetworkStatus, b: VeraSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: VeraSDK.Reachability.Connection, b: VeraSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: VeraSDK.Reachability.NetworkReachable?
  public var whenUnreachable: VeraSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: VeraSDK.Reachability.Connection {
    get
  }
  public var connection: VeraSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension VeraSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol Logger {
  func log(_ message: Swift.String)
  func exception(_ message: Swift.String)
}
extension VeraSDK.Logger {
  public func error(_ message: Swift.String, _ source: Swift.StaticString = #function)
  public func error(_ error: Swift.Error, _ source: Swift.StaticString = #function)
  public func warn(_ message: Swift.String, _ source: Swift.StaticString = #function)
  public func verbose(_ message: Swift.String, _ source: Swift.StaticString = #function)
  public func exception(_ message: Swift.String)
}
public protocol Mall {
  func prepareDataOpsGraph()
}
public struct ConsoleLogger : VeraSDK.Logger {
  public init()
  public func log(_ message: Swift.String)
}
public enum Vera {
  public static func useConfig(_ config: VeraSDK.Vera.Configuration)
  public static func useEventHandler(_ eventHandler: @escaping VeraSDK.VeraEventHandler)
  public static func handleEvent(_ event: VeraSDK.Vera.ClientEvent)
  public static func configureDeeplink(_ deeplink: Swift.String)
  public static func getController() -> VeraSDK.VeraViewController?
}
public protocol OutputNode : AnyObject {
  associatedtype Output
  typealias Updater = (Self.Output) -> Self.Output
  typealias FilterUpdater = (Self.Output) -> (Swift.Bool, Self.Output)
  func push(_ value: Self.Output)
  func update(_ with: @escaping (Self.Output) -> Self.Output)
  func maybeUpdate(_ with: @escaping Self.FilterUpdater)
}
extension Combine.CurrentValueSubject : VeraSDK.OutputNode {
  final public func push(_ value: Output)
  final public func update(_ with: (Output) -> Output)
  final public func maybeUpdate(_ with: (Output) -> (Swift.Bool, Output))
}
prefix operator ~>
postfix operator >?
postfix operator >%
public typealias VeraEventHandler = (VeraSDK.Vera.Event) -> Swift.Void
extension VeraSDK.Vera {
  public enum AuthenticationToken : Swift.Equatable {
    case anonymous
    case offline
    case loggedIn(token: Swift.String, userID: Swift.String)
    public static func == (a: VeraSDK.Vera.AuthenticationToken, b: VeraSDK.Vera.AuthenticationToken) -> Swift.Bool
  }
  public enum ClientEvent {
    case updateToken(VeraSDK.Vera.AuthenticationToken)
    case pause
    case resume
    case sendDeeplink(Swift.String)
    case sendMessage(receiver: Swift.String, data: Swift.String)
  }
  public enum Event {
    case login
    case logout
    case refreshToken
    case handleMessage(sender: Swift.String, data: Swift.String)
  }
}
extension VeraSDK.Vera {
  public struct Configuration {
    public let domain: Foundation.URL
    public let registration: VeraSDK.Vera.Configuration.RegistrationEndpoint
    public var auth: VeraSDK.Vera.Configuration.Authentication {
      get
    }
    public let app: VeraSDK.Vera.Configuration.App
    public let logger: VeraSDK.Logger
    public var language: VeraSDK.Vera.Configuration.Language {
      get
    }
    public init(domain: Foundation.URL = URL(string: "https://vera.resonai.com")!, registration: VeraSDK.Vera.Configuration.RegistrationEndpoint = .default, app: VeraSDK.Vera.Configuration.App, auth: VeraSDK.Vera.Configuration.Authentication = .anonymous, language: VeraSDK.Vera.Configuration.Language = .en, logger: VeraSDK.Logger = VeraLoggers())
  }
}
extension VeraSDK.Vera.Configuration {
  public struct RegistrationEndpoint {
    public init(url: Foundation.URL, port: Swift.Int)
    public static let `default`: VeraSDK.Vera.Configuration.RegistrationEndpoint
  }
  public struct Authentication : Swift.Equatable {
    public let username: Swift.String?
    public init(username: Swift.String?)
    public static let anonymous: VeraSDK.Vera.Configuration.Authentication
    public static func == (a: VeraSDK.Vera.Configuration.Authentication, b: VeraSDK.Vera.Configuration.Authentication) -> Swift.Bool
  }
  public struct App {
    public let clientID: Swift.String
    public let siteIDs: [Swift.String]
    public let shouldShowCloseButton: Swift.Bool
    public let hideHeader: Swift.Bool
    public let implementsAuthentication: Swift.Bool
    public let deepLinkPrefix: Swift.String?
    public init(clientID: Swift.String, siteIDs: [Swift.String] = [], implementsAuthentication: Swift.Bool = true, shouldShowCloseButton: Swift.Bool = true, hideHeader: Swift.Bool = false, deepLinkPrefix: Swift.String? = nil)
  }
  public enum Language : Swift.String {
    case en, ru, zh, de, hi, th, ja, vi, fr, es, sv, he
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: VeraSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: VeraSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: VeraSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: VeraSDK.KeychainSwiftAccessOptions, b: VeraSDK.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias MaybeUpdater<T> = (T) -> (Swift.Bool, T)
infix operator ??= : NilCoalescingPrecedence
public struct VeraLoggers : VeraSDK.Logger {
  public let loggers: [VeraSDK.Logger]
  public init(_ loggers: [VeraSDK.Logger] = [ConsoleLogger()])
  public func log(_ message: Swift.String)
  public func exception(_ message: Swift.String)
}
@available(*, unavailable, renamed: "Connection")
extension VeraSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension VeraSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension VeraSDK.Reachability.Connection : Swift.Equatable {}
extension VeraSDK.Reachability.Connection : Swift.Hashable {}
extension VeraSDK.Vera.Configuration.Language : Swift.Equatable {}
extension VeraSDK.Vera.Configuration.Language : Swift.Hashable {}
extension VeraSDK.Vera.Configuration.Language : Swift.RawRepresentable {}
extension VeraSDK.KeychainSwiftAccessOptions : Swift.Equatable {}
extension VeraSDK.KeychainSwiftAccessOptions : Swift.Hashable {}
