// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VeraSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import AVFoundation
import Accelerate
import SystemConfiguration.CaptiveNetwork
import Combine
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMotion
import Foundation
import GameplayKit
import JavaScriptCore
import LocalAuthentication
import Metal
import MetalKit
import NetworkExtension
import ScanditBarcodeCapture
import ScanditCaptureCore
import Security
import Swift
import SystemConfiguration
import UIKit
@_exported import VeraSDK
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import libwebp
import os
import simd
postfix operator >!
public struct HRToastConfig {
  public init()
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class func hr_setToastThemeColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public class func hr_toastThemeColor() -> UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public class func hr_setToastTitleFontName(fontName: Swift.String)
  @_Concurrency.MainActor(unsafe) public class func hr_toastTitleFontName() -> Swift.String
  @_Concurrency.MainActor(unsafe) public class func hr_setToastFontName(fontName: Swift.String)
  @_Concurrency.MainActor(unsafe) public class func hr_toastFontName() -> Swift.String
  @_Concurrency.MainActor(unsafe) public class func hr_setToastFontColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public class func hr_toastFontColor() -> UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public func makeToast(message msg: Swift.String, withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func makeToast(message msg: Swift.String, duration: Swift.Double, position: Swift.AnyObject, withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func makeToast(message msg: Swift.String, duration: Swift.Double, position: Swift.AnyObject, title: Swift.String, withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func makeToast(message msg: Swift.String, duration: Swift.Double, position: Swift.AnyObject, image: UIKit.UIImage, withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func makeToast(message msg: Swift.String, duration: Swift.Double, position: Swift.AnyObject, title: Swift.String, image: UIKit.UIImage, withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func showToast(toast: UIKit.UIView, withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(message msg: Swift.String, withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func hideToastActivity(withConfiguration config: VeraSDK.HRToastConfig = HRToastConfig())
  @_Concurrency.MainActor(unsafe) public func hideToast(toast: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func hideToast(toast: UIKit.UIView, force: Swift.Bool, withConfiguration config: VeraSDK.HRToastConfig)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func toastTimerDidFinish(_ timer: Foundation.Timer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func handleToastTapped(_ recognizer: UIKit.UITapGestureRecognizer)
}
public struct Memory {
  public static var formattedFootprint: Swift.String? {
    get
  }
}
public struct EventDecodingError : Swift.Error, Swift.Equatable {
  public static func == (lhs: VeraSDK.EventDecodingError, rhs: VeraSDK.EventDecodingError) -> Swift.Bool
}
extension Swift.Result : Swift.Decodable where Success : Swift.Decodable, Failure == VeraSDK.EventDecodingError {
  public init(from decoder: any Swift.Decoder) throws
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (VeraSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (VeraSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: VeraSDK.Reachability.NetworkStatus, b: VeraSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: VeraSDK.Reachability.Connection, b: VeraSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: VeraSDK.Reachability.NetworkReachable?
  public var whenUnreachable: VeraSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: VeraSDK.Reachability.Connection {
    get
  }
  public var connection: VeraSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension VeraSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum LogLevel : Swift.String {
  case info
  case debug
  case error
  case warn
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Logger {
  func log(_ message: Swift.String, level: VeraSDK.LogLevel)
  func exception(_ message: Swift.String)
}
extension VeraSDK.Logger {
  public func error(_ message: Swift.String, _ source: Swift.StaticString = #function)
  public func error(_ error: any Swift.Error, _ source: Swift.StaticString = #function)
  public func warn(_ message: Swift.String, _ source: Swift.StaticString = #function)
  public func info(_ message: Swift.String, _ source: Swift.StaticString = #function)
  public func debug(_ message: Swift.String, _ source: Swift.StaticString = #function)
  public func exception(_ message: Swift.String)
}
@objc @objcMembers public class VeraAppObjC : ObjectiveC.NSObject {
  @objc final public let clientId: Swift.String
  @objc final public let siteIds: [Swift.String]?
  final public let shouldShowCloseButton: Swift.Bool?
  final public let hideHeader: Swift.Bool?
  final public let implementsAuthentication: Swift.Bool?
  @objc final public let deepLinkPrefix: Swift.String?
  @objc public init(clientId: Swift.String, siteIds: [Swift.String]?, shouldShowCloseButton: Swift.Bool = true, hideHeader: Swift.Bool = false, implementsAuthentication: Swift.Bool = true, deepLinkPrefix: Swift.String?)
  @objc deinit
}
@objc @objcMembers public class VeraConfigurationObjC : ObjectiveC.NSObject {
  @objc final public let domain: Foundation.URL?
  @objc final public let username: Swift.String?
  @objc final public let app: VeraSDK.VeraAppObjC
  @objc final public let language: Swift.String?
  @objc public init(domain: Foundation.URL?, username: Swift.String?, app: VeraSDK.VeraAppObjC, language: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class VeraObjC : ObjectiveC.NSObject {
  @objc public static var controller: UIKit.UIViewController {
    @objc get
  }
  @objc public static var view: UIKit.UIView {
    @objc get
  }
  @objc public static func useConfiguration(_ config: VeraSDK.VeraConfigurationObjC)
  @objc public static func useDelegate(_ delegate: any VeraSDK.VeraDelegateObjC)
  @objc public static func updateTokenAnonymous()
  @objc public static func updateTokenOffline()
  @objc public static func updateToken(token: Swift.String, userId: Swift.String)
  @objc public static func pause()
  @objc public static func resume()
  @objc public static func sendDeeplink(_ link: Swift.String)
  @objc public static func sendMessage(receiver: Swift.String, data: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VeraDelegateObjC {
  @objc func veraNeedsToLogin()
  @objc func veraNeedsToLogout()
  @objc func veraShouldRefreshToken()
  @objc func handleVeraMessage(sender: Swift.String, data: Swift.String)
}
public struct ConsoleLogger : VeraSDK.Logger {
  public init()
  public func log(_ message: Swift.String, level: VeraSDK.LogLevel)
}
public enum Vera {
  public static func useConfig(_ config: VeraSDK.Vera.Configuration)
  public static func useEventHandler(_ eventHandler: @escaping VeraSDK.VeraEventHandler)
  public static func handleEvent(_ event: VeraSDK.Vera.ClientEvent)
  public static func configureDeeplink(_ deeplink: Swift.String)
  public static func getController() -> UIKit.UIViewController
  public static func getView() -> UIKit.UIView
}
public protocol OutputNode : AnyObject {
  associatedtype Output
  typealias Updater = (Self.Output) -> Self.Output
  typealias FilterUpdater = (Self.Output) -> (Swift.Bool, Self.Output)
  func push(_ value: Self.Output)
  func update(_ with: @escaping Self.Updater)
  func maybeUpdate(_ with: @escaping Self.FilterUpdater)
}
extension Combine.CurrentValueSubject : VeraSDK.OutputNode {
  final public func push(_ value: Output)
  final public func update(_ with: (Output) -> Output)
  final public func maybeUpdate(_ with: (Output) -> (Swift.Bool, Output))
}
prefix operator ~>
@objc @_inheritsConvenienceInitializers public class VeraSDKObjC : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
postfix operator >?
postfix operator >%
public typealias VeraEventHandler = (VeraSDK.Vera.Event) -> Swift.Void
extension VeraSDK.Vera {
  public enum AuthenticationToken : Swift.Equatable {
    case anonymous
    case offline
    case loggedIn(token: Swift.String, userID: Swift.String)
    public static func == (a: VeraSDK.Vera.AuthenticationToken, b: VeraSDK.Vera.AuthenticationToken) -> Swift.Bool
  }
  public enum ClientEvent {
    case updateToken(VeraSDK.Vera.AuthenticationToken)
    case pause
    case resume
    case sendDeeplink(Swift.String)
    case sendMessage(receiver: Swift.String, data: Swift.String)
  }
  public enum Event {
    case login
    case logout
    case refreshToken
    case handleMessage(sender: Swift.String, data: Swift.String)
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class WatchdogService : ObjectiveC.NSObject, VeraSDK.WatchdogRunLoopObserverDelegate {
  @objc deinit
  final public func setup()
  final public func stop()
  @objc final public func runLoopDidStall(withDuration duration: Foundation.TimeInterval)
}
extension VeraSDK.Vera {
  public struct Configuration {
    public var domain: Foundation.URL {
      get
    }
    public var registration: VeraSDK.Vera.Configuration.RegistrationEndpoint {
      get
    }
    public var auth: VeraSDK.Vera.Configuration.Authentication {
      get
    }
    public var app: VeraSDK.Vera.Configuration.App {
      get
    }
    public let logger: any VeraSDK.Logger
    public var language: VeraSDK.Vera.Configuration.Language {
      get
    }
    public init(domain: Foundation.URL = URL(string: "https://vera.resonai.com")!, registration: VeraSDK.Vera.Configuration.RegistrationEndpoint = .default, app: VeraSDK.Vera.Configuration.App, auth: VeraSDK.Vera.Configuration.Authentication = .anonymous, language: VeraSDK.Vera.Configuration.Language = .en, logger: any VeraSDK.Logger = VeraLoggers())
  }
}
extension VeraSDK.Vera.Configuration {
  public struct RegistrationEndpoint : Swift.Equatable, Swift.Codable {
    public init(url: Foundation.URL, port: Swift.Int)
    public static let `default`: VeraSDK.Vera.Configuration.RegistrationEndpoint
    public static func == (a: VeraSDK.Vera.Configuration.RegistrationEndpoint, b: VeraSDK.Vera.Configuration.RegistrationEndpoint) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Authentication : Swift.Equatable {
    public var username: Swift.String? {
      get
    }
    public init(username: Swift.String?)
    public static let anonymous: VeraSDK.Vera.Configuration.Authentication
    public static func == (a: VeraSDK.Vera.Configuration.Authentication, b: VeraSDK.Vera.Configuration.Authentication) -> Swift.Bool
  }
  public struct App {
    public var clientID: Swift.String {
      get
    }
    public var siteIDs: [Swift.String] {
      get
    }
    public var shouldShowCloseButton: Swift.Bool {
      get
    }
    public var hideHeader: Swift.Bool {
      get
    }
    public var implementsAuthentication: Swift.Bool {
      get
    }
    public var deepLinkPrefix: Swift.String? {
      get
    }
    public init(clientID: Swift.String, siteIDs: [Swift.String] = [], implementsAuthentication: Swift.Bool = true, shouldShowCloseButton: Swift.Bool = true, hideHeader: Swift.Bool = false, deepLinkPrefix: Swift.String? = nil)
  }
  public enum Language : Swift.String {
    case en, ru, zh, de, hi, th, ja, vi, fr, es, sv, he
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: VeraSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: VeraSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: VeraSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: VeraSDK.KeychainSwiftAccessOptions, b: VeraSDK.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias FilterUpdater<T> = (T) -> (Swift.Bool, T)
infix operator ??= : NilCoalescingPrecedence
public struct VeraLoggers : VeraSDK.Logger {
  public let loggers: [any VeraSDK.Logger]
  public init(_ loggers: [any VeraSDK.Logger] = [ConsoleLogger()])
  public func log(_ message: Swift.String, level: VeraSDK.LogLevel)
  public func exception(_ message: Swift.String)
}
@available(*, unavailable, renamed: "Connection")
extension VeraSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension VeraSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension VeraSDK.Reachability.Connection : Swift.Equatable {}
extension VeraSDK.Reachability.Connection : Swift.Hashable {}
extension VeraSDK.LogLevel : Swift.Equatable {}
extension VeraSDK.LogLevel : Swift.Hashable {}
extension VeraSDK.LogLevel : Swift.RawRepresentable {}
extension VeraSDK.Vera.Configuration.Language : Swift.Equatable {}
extension VeraSDK.Vera.Configuration.Language : Swift.Hashable {}
extension VeraSDK.Vera.Configuration.Language : Swift.RawRepresentable {}
extension VeraSDK.KeychainSwiftAccessOptions : Swift.Equatable {}
extension VeraSDK.KeychainSwiftAccessOptions : Swift.Hashable {}
